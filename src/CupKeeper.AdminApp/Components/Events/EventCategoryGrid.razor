@implements IDragSource
@inject EventService EventService
@inject CategoryAliasService CategoryAliasService
@inject IDragProvider DragProvider
<div class="my-6 rounded bg-gray-800 p-6 shadow-lg">
    <Toolbar Title=@Category.Name>
        <Buttons>
            <Button Type="ButtonType.DefaultOutline" Clicked=@OnBeginEditCategory>
                @HeroIcons.Pencil("inline-block mr-2", "w-4 h-4")
                Edit Category
            </Button>
        </Buttons>
    </Toolbar>
    
    <DropZone @bind-Visible=@_isDropVisible Dropped=@OnRiderDropped TTarget="RiderResultViewModel">
        <Content>Drop a rider here to move them!</Content>
    </DropZone>
            
    @* <DataGrid HideToolbar Items="Category.Riders.OrderBy(m => m.Place)" Columns="_categoryColumns" /> *@
    
    <TemplatedGrid Items="Category.Riders.OrderBy(m => m.Place)">
        <ColumnTemplate>
            <Header>Place</Header>
            <Cell>@context.Place</Cell>
        </ColumnTemplate>
        <ColumnTemplate>
            <Header>Points</Header>
            <Cell>@context.Points</Cell>
        </ColumnTemplate>
        <ColumnTemplate>
            <Header>Rider</Header>
            <Cell>
                <div>
                    @context.RiderName
                </div>
                <div class="text-sm opacity-50 font-mono">@context.RiderId</div>
            </Cell>
        </ColumnTemplate>
        <ColumnTemplate>
            <Header>Team</Header>
            <Cell>@context.TeamName</Cell>
        </ColumnTemplate>
        <ColumnTemplate>
            <Header>Time</Header>
            <Cell>
                @if (context.Time is not null)
                {
                    @(TimeSpan.FromSeconds(context.Time.Value).ToString("g"))
                }
                else
                {
                    <span>N/A</span>
                }
            </Cell>
        </ColumnTemplate>
    </TemplatedGrid>
            
    @if (Category.ExcludedRiders.Any())
    {
        <h2 class="text-xl mb-0">
            Excluded Results
        </h2>

        @* <DataGrid HideToolbar Items="Category.ExcludedRiders" Columns="_categoryColumns"/> *@
        
        <TemplatedGrid Items="Category.ExcludedRiders">
            <ColumnTemplate>
                <Header>Place</Header>
                <Cell>@context.Place</Cell>
            </ColumnTemplate>
            <ColumnTemplate>
                <Header>Points</Header>
                <Cell>@context.Points</Cell>
            </ColumnTemplate>
            <ColumnTemplate>
                <Header>Rider</Header>
                <Cell>@context.RiderName</Cell>
            </ColumnTemplate>
            <ColumnTemplate>
                <Header>Team</Header>
                <Cell>@context.TeamName</Cell>
            </ColumnTemplate>
            <ColumnTemplate>
                <Header>Time</Header>
                <Cell>
                    @if (context.Time is not null)
                    {
                        @(TimeSpan.FromSeconds(context.Time.Value).ToString("g"))
                    }
                    else
                    {
                        <span>N/A</span>
                    }
                </Cell>
            </ColumnTemplate>
        </TemplatedGrid>
    }
</div>

<Dialog @bind-IsVisible=@_isEditCategoryVisible Title="Edit Category" WindowClass="w-1/2">
    <Content>
        @if (!string.IsNullOrWhiteSpace(_errorMessage))
        {
            <Alert Type="AlertType.Error">
                @_errorMessage
            </Alert>
        }
        <div class="mb-3">
            <Label>Name</Label>
            @if (!string.IsNullOrWhiteSpace(_categoryNameAlias))
            {
                <SubLabel>
                    Found alias: 
                    <a class="cursor-pointer text-indigo-500 underline" @onclick="@(() => { _editContext.Name = _categoryNameAlias; StateHasChanged(); })">
                        @_categoryNameAlias
                    </a>
                </SubLabel>
            }
            <TextBox @bind-Value=@_editContext.Name/>
        </div>

        <div class="mb-3">
            <Label>Order</Label>
            <TextBox @bind-Value=@_editContext.Order/>
        </div>
    </Content>
    <Footer>
        <Button Type="ButtonType.DefaultOutline" Clicked=@(() => { _isEditCategoryVisible = false; StateHasChanged(); })>
            @HeroIcons.ArrowLeft("inline-block mr-2")
            Cancel
        </Button>
        <Button Type="ButtonType.Success" Clicked=@OnEndEditCategory>
            @HeroIcons.Check("inline-block mr-2")
            Save
        </Button>
    </Footer>
</Dialog>

@code {
    [Parameter] public Guid EventId { get; set; }

    [Parameter] public CategoryResultViewModel Category { get; set; } = null!;

    private CategoryResultViewModel _editContext = new();
    
    private bool _isEditCategoryVisible = false;
    private string _categoryNameAlias = "";
    private string _errorMessage = string.Empty;

    private bool _isDropVisible = false;
    
    private IEnumerable<Column<RiderResultViewModel>> _categoryColumns =
    [
        new() { Title = "Place", Field = m => m.Place, Component = typeof(RiderPlacementColumn) },
        new() { Title = "Points", Field = m => m.Points },
        new() { Title = "Rider", Field = m => m.RiderName },
        new() { Title = "Team", Field = m => m.TeamName },
        new() { Title = "Time", Field = m => m.Time, Component = typeof(RiderTimeColumn) }
    ];

    private async Task OnBeginEditCategory()
    {
        var aliases = await CategoryAliasService.GetCategoryAliases();

        _categoryNameAlias = aliases
            .FirstOrDefault(m => 
                m.Aliases.Any(a => a.Equals(Category.Name, StringComparison.OrdinalIgnoreCase))
            )?.Name ?? "";
        
        _editContext.Name = Category.Name;
        _editContext.Order = Category.Order;
        _isEditCategoryVisible = true;
        StateHasChanged();
    }

    private async Task OnEndEditCategory()
    {
        var result = await EventService.SetCategoryName(EventId, Category.Id, _editContext.Name, _editContext.Order);

        if (!result.IsSuccess)
        {
            _errorMessage = string.Join("; ", result.Messages);
            StateHasChanged();
            return;
        }
        
        Category.Name = _editContext.Name;
        Category.Order = _editContext.Order;
        _isEditCategoryVisible = false;
        
        StateHasChanged();
    }

    private void OnBeginDrag(RiderResultViewModel rider)
    {
        Console.WriteLine("Rider.DragStart");
        DragProvider.DraggedObject = rider;
        // DragProvider.DragSource = this;
        // StateHasChanged();
    }

    private void OnEndDrag(RiderResultViewModel rider)
    {
        Console.WriteLine("Rider.DragEnd");
        DragProvider.DraggedObject = null;
        //DragProvider.DragSource = null;
    }

    public Task CompleteDrag(object draggedObject)
    {
        Console.WriteLine("CompleteDrag (Source)");
        
        if (draggedObject is RiderResultViewModel viewModel)
        {
            Category.Riders = Category.Riders.Where(m => m.Id != viewModel.Id).ToArray();
            StateHasChanged();
        }

        return Task.CompletedTask;
    }

    private Task OnRiderDropped(object draggedObject)
    {
        if (draggedObject is RiderResultViewModel viewModel)
        {
            Category.Riders = Category.Riders.Union([viewModel]).ToArray();
            StateHasChanged();
        }

        Console.WriteLine("OnRiderDropped");
        return Task.CompletedTask;
    }

}