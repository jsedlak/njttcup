@page "/riders"
@inject RiderService RiderService;
<PageTitle>Riders - Cup Keeper</PageTitle>

<div class="mx-auto px-4 sm:px-6 lg:px-8 py-6">
    <Toolbar Title="Riders" Subtitle="Manage all riders here.">
        <Buttons>
            <Button Type="ButtonType.PrimaryOutline" Clicked=@OnSetPascalNames>
                @HeroIcons.ChatBubbleBottomCenterText("inline-block mr-2", "w-5 h-5")
                Pascal Case
            </Button>
            <Button Type="ButtonType.PrimaryOutline" Clicked=@OnSetUpperCaseNames>
                @HeroIcons.ChatBubbleBottomCenterText("inline-block mr-2", "w-5 h-5")
                Upper Case
            </Button>
        </Buttons>
    </Toolbar>

    @* <CourseSelector /> *@
    <DataGrid Items=@_riders Columns=@_columns HideToolbar NumberPerPage="100" OnEdit=@OnBeginEdit  />
</div>

<Dialog Title="Edit Rider" @bind-IsVisible=@_isEditVisible>
    <Content>
        <div class="mb-4">
            <Label>Name</Label>
            <TextBox @bind-Value=@_editContext.Name/>
        </div>
    </Content>
    <Footer>
        <Button Clicked=@(() => { _isEditVisible = false; StateHasChanged();  }) Type="ButtonType.DefaultOutline">Cancel</Button>
        <Button Clicked=@OnEndEdit Type="ButtonType.Success">Save</Button>
    </Footer>
</Dialog>

<Dialog Title="Updating Riders" @bind-IsVisible=@_isUpdatingRiders WindowClass="w-1/2 h-1/2">
    <Content>
        <div class="flex justify-center items-center">
        <Spinner></Spinner>
        </div>
    </Content>
</Dialog>

@code {
    private IEnumerable<Rider> _riders = [];

    private bool _isUpdatingRiders = false;
    private bool _isEditVisible = false;
    private Rider _editContext = new();

    private IEnumerable<Column<Rider>> _columns =
    [
        new Column<Rider>() { Title = "Id", Field = m => m.Id },
        new Column<Rider>() { Title = "Name", Field = m => m.Name },
        new Column<Rider>() { Title = "First Name", Field = m => m.Name.Split(' ', StringSplitOptions.RemoveEmptyEntries).FirstOrDefault() ?? "" },
        new Column<Rider>() { Title = "Last Name", Field = m => m.Name.Split(' ', StringSplitOptions.RemoveEmptyEntries).LastOrDefault() ?? "" },
        new Column<Rider>() { Title = "Team", Field = m => m.TeamName! },
        new Column<Rider>() { Title = "License", Field = m => m.UsacLicenseNumber! }
    ];

    private IEnumerable<CommandItem> _actions =
    [
        new CommandItem() { Icon = HeroIcons.Pencil(), Key = "edit", Title = "Edit " }
    ];
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await LoadRidersAsync();
    }

    private async Task LoadRidersAsync()
    {
        _riders = await RiderService.GetRidersAsync();
    }

    private void OnBeginEdit(Rider rider)
    {
        _editContext.Id = rider.Id;
        _editContext.Name = rider.Name;
        _editContext.TeamName = rider.TeamName;
        _editContext.UsacLicenseNumber = rider.UsacLicenseNumber;
        
        _isEditVisible = true;
        StateHasChanged();
    }

    private async Task OnEndEdit()
    {
        await RiderService.SetRiderName(_editContext.Id, _editContext.Name);
        await LoadRidersAsync();
        _isEditVisible = false;
        StateHasChanged();
    }

    private async Task OnSetPascalNames()
    {
        _isUpdatingRiders = true;
        StateHasChanged();
        
        foreach (var rider in _riders)
        {
            await RiderService.SetRiderName(rider.Id, rider.Name.ToPascalCase());
        }
        
        await LoadRidersAsync();
        
        _isUpdatingRiders = false;
        StateHasChanged();
    }

    private async Task OnSetUpperCaseNames()
    {
        _isUpdatingRiders = true;
        StateHasChanged();
        
        foreach (var rider in _riders)
        {
            await RiderService.SetRiderName(rider.Id, rider.Name.ToUpper());
        }
        
        await LoadRidersAsync();
        
        _isUpdatingRiders = false;
        StateHasChanged();
    }

}