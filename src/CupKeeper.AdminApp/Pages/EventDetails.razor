@page "/events/{eventId:guid}"
@inherits CupKeeperComponentBase
<PageTitle>@_event.ChampionshipYear @_event.Name - Event Details - Cup Keeper</PageTitle>

<div class="bg-indigo-900 px-4 sm:px-6 lg:px-8 py-6 shadow-lg">
    <Toolbar Title=@($"{_event.ChampionshipYear} {_event.Name}") Subtitle="We do some eventing here.">
        <Buttons>
            @if (!_event.IsPublished)
            {
                if (_event.IsDeleted)
                {
                    <Button Type="ButtonType.ErrorOutline" Clicked="@(() => _undeleteDialogContext.Open())">
                        @HeroIcons.ArrowUturnUp("inline-block")
                        <span>Restore</span>
                    </Button>
                }
                else
                {
                    <Button Type="ButtonType.ErrorOutline" Clicked="@(() => _deleteDialogContext.Open())">
                        @HeroIcons.Trash("inline-block")
                        <span>Delete</span>
                    </Button>
                }
                
                <Button Type="ButtonType.DefaultOutline" Clicked="@(() => _editDialogContext.Open(_event))">
                    @HeroIcons.Pencil("inline-block")
                    <span>Edit</span>
                </Button>
                <Button Type="ButtonType.Primary" Clicked=@LoadResultsFromUsac Disabled="@_isLoadingResults">
                    @if (_isLoadingResults)
                    {
                        <Spinner/>
                    }
                    else
                    {
                        @HeroIcons.ArrowRightOnRectangle("inline-block")
                    }
                    <span>Load Results</span>
                </Button>
            }
            
            @if (!_event.IsPublished && _event.Results.Any())
            {
                <Button Type="ButtonType.Primary" Clicked="HandlePublishClicked" Disabled="@_isPublishing">
                    @HeroIcons.BarsArrowUp("inline-block")
                    <span>Publish</span>
                    @if (_isPublishing)
                    {
                        <Spinner/>
                    }
                </Button>
            }
            else if (_event.IsPublished)
            {
                <Button Type="ButtonType.Primary" Clicked="@(() => _unpublishDialogContext.Open())">
                    @HeroIcons.ArrowUturnDown("inline-block")
                    <span>Unpublish</span>
                </Button>
            }
        </Buttons>
    </Toolbar>
</div>

<div class="mx-auto px-4 sm:px-6 lg:px-8 my-6">
    @* Top Grid of Info *@
    <div class="grid sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4 my-6">
        <StatCard>
            <Title>Course</Title>
            <Statistic>
                <h4 class="font-bold text-2xl">@_event.VenueName</h4>
                <h5 class="opacity-75 text-xl">@_event.CourseName</h5>
            </Statistic>
        </StatCard>
        <StatCard>
            <Title>Status</Title>
            <AdditionalData>
                @if (_event.IsPublished)
                {
                    @HeroIcons.CheckCircle("text-green-400")
                }
                else if (_event.IsDeleted)
                {
                    @HeroIcons.XMark("text-red-400")
                }
                else
                {
                    @HeroIcons.MinusCircle("opacity-75")
                }
            </AdditionalData>
            <Statistic>
                @if (_event.IsPublished)
                {
                    <span>Published</span>
                }
                else if (_event.IsDeleted)
                {
                    <span>Deleted</span>
                }
                else
                {
                    <span>Draft</span>
                }
            </Statistic>
        </StatCard>
        <StatCard>
            <Title>Scheduled</Title>
            <Statistic>
                @(_event.ScheduledDate is null ? "Not Set" : _event.ScheduledDate.Value.ToString("D"))
            </Statistic>
        </StatCard>
        <StatCard>
            <Title>Actual</Title>
            <Statistic>
                @(_event.ActualDate is null ? "Not Set" : _event.ActualDate.Value.ToString("D"))
            </Statistic>
        </StatCard>

    </div>

    @foreach (var category in _event.Results.OrderBy(m => m.Order).ThenBy(m => m.Name))
    {
        <EventCategoryGrid Category="category" EventId="EventId"/>
    }
</div>

<Dialog @bind-IsVisible="@_editDialogContext.IsVisible" Title="Edit Event" WindowClass="w-1/2">
    <Content>
        <div class="grid grid-cols-2 gap-4">
            <div>
                <div class="mb-2">
                    <Label>Scheduled Date</Label>
                    <input class=@Theme.Forms.TextBox type="date" @bind=@_editDialogContext.TentativeModel.ScheduledDate onblur=@OnEditContextScheduledDateChanged/>
                </div>

                <div class="mb-2">
                    <Label>Actual Date</Label>
                    <input class=@Theme.Forms.TextBox type="date" @bind=@_editDialogContext.TentativeModel.ActualDate onblur=@OnEditContextScheduledDateChanged/>
                </div>
            </div>
            <div>
                <CourseSelector
                    CourseId=@_editDialogContext.TentativeModel.CourseId
                    VenueId=@_editDialogContext.TentativeModel.VenueId
                    VenueIdChanged=@((Guid venueId) => { _editDialogContext.TentativeModel.VenueId = venueId; })
                    CourseIdChanged=@OnEditContextCourseChanged/>
            </div>
        </div>
    </Content>
    <Footer>
        <Button Clicked="@(() => _editDialogContext.Cancel())">Cancel</Button>
        <Button Type="ButtonType.Success" Clicked="@(() => _editDialogContext.Confirm(SaveEventCallback))">Save</Button>
    </Footer>
</Dialog>

<Dialog @bind-IsVisible="@_unpublishDialogContext.IsVisible" Title="Delete Event">
    <Content>
        <p>Are you sure you want to unpublish this event? Doing so will remove it from the leaderboard calculation.</p>
    </Content>
    <Footer>
        <Button Clicked="@(() => _unpublishDialogContext.Cancel())">Cancel</Button>
        <Button Clicked="@(() => _unpublishDialogContext.Confirm(UnpublishEventCallback))" Type="ButtonType.Primary">Confirm Unpublish</Button>
    </Footer>
</Dialog>

<Dialog @bind-IsVisible="@_deleteDialogContext.IsVisible" Title="Delete Event">
    <Content>
        <p>Are you sure you want to mark this event as deleted?</p>
    </Content>
    <Footer>
        <Button Clicked="@(() => _deleteDialogContext.Cancel())">Cancel</Button>
        <Button Clicked="@(() => _deleteDialogContext.Confirm(DeleteEventCallback))" Type="ButtonType.Error">Confirm Delete</Button>
    </Footer>
</Dialog>

<Dialog @bind-IsVisible="@_undeleteDialogContext.IsVisible" Title="Restore Event">
    <Content>
        @if (_undeleteDialogContext.IsWaiting)
        {
            <div class="flex items-center justify-center p-3">
                <Spinner/>
            </div>
        }
        <p>Are you sure you want to restore this event from being deleted?</p>
    </Content>
    <Footer>
        <Button Clicked="@(async () => await _undeleteDialogContext.Cancel())">Cancel</Button>
        <Button Clicked="@(async () => await _undeleteDialogContext.Confirm(UndeleteEventCallback))" Type="ButtonType.Error">Confirm Restore</Button>
    </Footer>
</Dialog>