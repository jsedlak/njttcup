@page "/events/{eventId:guid}"
@inherits CupKeeperComponentBase
@using CupKeeper.AdminApp.Components
@using CupKeeper.AdminApp.Services
@using CupKeeper.Domains.Championships.ViewModel
@inject EventService EventService;
<PageTitle>@_event.ChampionshipYear @_event.Name - Event Details - Cup Keeper</PageTitle>

<div class="bg-indigo-900 px-4 sm:px-6 lg:px-8 py-6 shadow-lg">
    <Toolbar Title=@($"{_event.ChampionshipYear} {_event.Name}") Subtitle="We do some eventing here.">
        <Buttons>
            <Button Type="ButtonType.DefaultOutline" Clicked=@OnBeginEdit>
                @HeroIcons.Pencil("inline-block")
                <span>Edit</span>
            </Button>
            <Button Type="ButtonType.Primary" Clicked=@LoadResultsFromUsac Disabled=@_isLoadingResults>
                @if (_isLoadingResults)
                {
                <Spinner/>
                }
                else
                {
                @HeroIcons.ArrowRightOnRectangle("inline-block")
                }
                <span>Load Results</span>
            </Button>
        </Buttons>
    </Toolbar>
</div>

<div class="mx-auto px-4 sm:px-6 lg:px-8 my-6">
    @* Top Grid of Info *@
    <div class="grid sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4 my-6">
        <InfoCard>
            <Title>Dates</Title>
            <Content>
                <div class="mb-1">
                    <h4 class="font-bold">Scheduled</h4>
                    @(_event.ScheduledDate is null ? "Not Set" : _event.ScheduledDate.Value.ToString("D"))
                </div>
                <div class="mb-1">
                    <h4 class="font-bold">Actual</h4>
                    @(_event.ActualDate is null ? "Not Set" : _event.ActualDate.Value.ToString("D"))
                </div>
            </Content>
        </InfoCard>

        <InfoCard>
            <Title>Course</Title>
            <Content>
                <div class="mb-1">
                    <h4 class="font-bold">@_event.VenueName</h4>
                    @_event.CourseName
                </div>
            </Content>
        </InfoCard>
    </div>

    <CascadingValue TValue="ICategoryWindow" Value="this" Name="CategoryWindow">
    @foreach (var category in _event.Results)
    {
        <EventCategoryGrid Category="category" EventId="EventId" />
    }
    </CascadingValue>
</div>

<Dialog @bind-IsVisible=@_isEditDialogVisible Title="Edit Event" WindowClass="w-1/2">
    <Content>
        <div class="grid grid-cols-2 gap-4">
            <div>
                <div class="mb-2">
                    <Label>Scheduled Date</Label>
                    <input class=@Theme.Forms.TextBox type="date" @bind=@_editContext.ScheduledDate onblur=@OnEditContextScheduledDateChanged/>
                </div>
            </div>    
            <div>
                <CourseSelector 
                    CourseId=@_editContext.CourseId 
                    VenueId=@_editContext.VenueId 
                    VenueIdChanged=@((Guid venueId) => { _editContext.VenueId = venueId; })
                    CourseIdChanged=@OnEditContextCourseChanged />
            </div>
        </div>
    </Content>
</Dialog>

@code {
    [Parameter] public Guid EventId { get; set; }

    [CascadingParameter(Name = "Theme")] public ITheme Theme { get; set; } = null!;

    private EventViewModel _event = new();
    private EventViewModel _editContext = new();
    private bool _isLoadingResults = false;

    private bool _isEditDialogVisible = false;

    private Timer? _loadTimer;

    private void OnBeginEdit()
    {
        CopyToEditContext();
        _isEditDialogVisible = true;
        StateHasChanged();
    }

    private async Task LoadResultsFromUsac()
    {
        _isLoadingResults = true;

        var response = await EventService.StartLoad(EventId);

        if (response)
        {
            _loadTimer = new Timer(CheckResultsAsync, new { }, TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(1));

            StateHasChanged();
        }
    }

    private async void CheckResultsAsync(object? state)
    {
        var isFinished = await EventService.CheckLoadStatus(EventId);

        if (!isFinished)
        {
            return;
        }
        

        _event = (await EventService.GetEvents()).First(m => m.Id == EventId);
        _isLoadingResults = false;

        if (_loadTimer is not null)
        {
            await _loadTimer.DisposeAsync();
            _loadTimer = null;
        }
            
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _event = (await EventService.GetEvents()).First(m => m.Id == EventId);
    }

    private async Task OnEditContextScheduledDateChanged(FocusEventArgs args)
    {
        if (_editContext.ScheduledDate == _event.ScheduledDate)
        {
            // nothing to submit
            return;
        }

        // submit to the server!
        var response = await EventService.SetScheduledDate(
            _event.Id, 
            _editContext.ScheduledDate,
            _editContext.ScheduledDate
        );

        // we probably want to reload this from the server, or provide a loopback
        if (response.IsSuccess)
        {
            _event.ScheduledDate = _editContext.ScheduledDate;
            _event.ActualDate = _editContext.ScheduledDate;
            StateHasChanged();
        }
    }

    private async Task OnEditContextCourseChanged(Guid courseId)
    {
        if (courseId == _editContext.CourseId)
        {
            return;
        }

        _editContext.CourseId = courseId;

        var response = await EventService.SetCourse(
            _event.Id,
            _editContext.VenueId,
            _editContext.CourseId
        );

        if (response.IsSuccess)
        {
            var reloadedEvent = (await EventService.GetEvents()).First(m => m.Id == EventId);
            _event.VenueId = reloadedEvent.VenueId;
            _event.VenueName = reloadedEvent.VenueName;
            _event.CourseId = reloadedEvent.CourseId;
            _event.CourseName = reloadedEvent.CourseName;
            
            StateHasChanged();
        }
    }

    private void CopyToEditContext()
    {
        _editContext.Name = _event.Name;
        _editContext.ScheduledDate = _event.ScheduledDate;
    }
}