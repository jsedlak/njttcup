@page "/"
@inherits CupKeeperComponentBase
@inject EventService EventService
<PageTitle>Home - Cup Keeper</PageTitle>

<div class="mx-auto px-4 sm:px-6 lg:px-8 py-6">
    <Toolbar Title="Events" Subtitle="We do some eventing here.">
        <Buttons>
            @* <Button Type="ButtonType.DefaultOutline" Clicked=@RefreshData> *@
            @*     @HeroIcons.ArrowPathRoundedSquare("inline-block") *@
            @* </Button> *@
            <Button Type="ButtonType.Primary" Clicked=@(() => { _createDialogVisible = true; _createCommand = new(); StateHasChanged(); })>
                @HeroIcons.DocumentPlus("inline-block")
                Create Event
            </Button>
            <Switch @bind-IsChecked="@_hideDeletedEvents" />
        </Buttons>
    </Toolbar>

    @* <CourseSelector /> *@
    <p class="text-sm mb-2">Found @DataContext.EventCount events.</p>

    <TemplatedGrid Items="@DataContext.Events.Where(m => !_hideDeletedEvents || !m.IsDeleted)" RowClassCallback="@RowClassHandler">
        <ColumnTemplate>
            <Header>ID</Header>
            <Cell>
                <a class="underline decoration-wavy decoration-indigo-500 decoration-1" href=@($"/events/{context.Id}")>@(context.Id.ToString().Split("-").First())...</a>
            </Cell>
        </ColumnTemplate>
        <ColumnTemplate>
            <Header>Year</Header>
            <Cell>@context.ChampionshipYear</Cell>
        </ColumnTemplate>
        <ColumnTemplate>
            <Header>Name</Header>
            <Cell>@context.Name</Cell>
        </ColumnTemplate>
        <ColumnTemplate>
            <Header>Venue/Course</Header>
            <Cell>
                <div>@context.VenueName</div>
                <div class="opacity-75 text-sm">@context.CourseName</div>
            </Cell>
        </ColumnTemplate>
        <ColumnTemplate>
            <Header>Status</Header>
            <Cell>
                @if (context.IsDeleted)
                {
                    <div class="flex gap-2 items-center">
                    @HeroIcons.XMark("inline-block text-red-400")
                    <span>Deleted</span>
                    </div>
                }
                else if (context.IsPublished)
                {
                    <div class="flex gap-2 items-center">
                    @HeroIcons.CheckBadge("inline-block text-green-400")
                    <span>Published</span>
                    </div>
                }
                else
                {
                    <div class="flex gap-2 items-center opacity-75">
                        @HeroIcons.MinusCircle("inline-block")
                        <span>Draft</span>
                    </div>
                }
            </Cell>
        </ColumnTemplate>
    </TemplatedGrid>
</div>

<Dialog WindowClass="w-1/2" Title="Create Event" @bind-IsVisible="_createDialogVisible">
    <Content>
        <div class="grid grid-cols-2 gap-4">
            <div>
                <div class="mb-2">
                    <Label>Name</Label>
                    <TextBox @bind-Value="_createCommand.Name"/>
                </div>
                <div class="mb-2">
                    <Label>Scheduled Date</Label>
                    <input type="date"
                           class=@Theme.Forms.TextBox
                           @bind=_createCommand.ScheduledDate/>
                </div>
                <div class="mb-2">
                    <Label>Venue/Course</Label>
                    <CourseSelector @bind-VenueId="_createCommand.VenueId" @bind-CourseId="_createCommand.CourseId"/>
                </div>
            </div>
            <div>
                <div class="mb-2">
                    <Label>Registration Link</Label>
                    <TextBox @bind-Value="_createCommand.RegistrationLink"/>
                </div>

                <div class="mb-2">
                    <Label>USAC Results Link</Label>
                    <TextBox @bind-Value="_createCommand.UsacResultsLink"/>
                </div>

                <div class="mb-2">
                    <Label>USAC Permit Number</Label>
                    <TextBox @bind-Value="_createCommand.UsacPermitNumber"/>
                </div>
            </div>
        </div>
    </Content>
    <Footer>
        <Button Type="ButtonType.DefaultOutline" Clicked=@(() => { _createDialogVisible = false; StateHasChanged(); })>Cancel</Button>
        <Button Type="ButtonType.Success"
                Clicked=@HandleCreateClicked>
            Create
        </Button>
    </Footer>
</Dialog>

@code {
    [CascadingParameter(Name = "Theme")] public ITheme Theme { get; set; } = null!;

    private bool _hideDeletedEvents = true;
    
    private bool _createDialogVisible;
    private string _createError = "";
    private CreateScheduledEventCommand _createCommand = new();

    private async Task HandleCreateClicked()
    {
        _createError = "";

        var response = await EventService.Create(_createCommand);

        if (response.IsSuccess)
        {
            _createDialogVisible = false;
            StateHasChanged();

            return;
        }

        _createError = string.Join("; ", response.Messages);
        StateHasChanged();
    }

    private string RowClassHandler(EventViewModel item)
    {
        if (item.IsDeleted)
        {
            return "opacity-50";
        }

        return "";
    }

}